apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "srv2.fullname" . }}-config
  labels:
    {{- include "srv2.labels" . | nindent 4 }}
data:
  POSTGRES_DB: {{ .Values.postgress.postgres_db }}
  POSTGRES_USER: {{ .Values.postgress.postgres_user }}
  POSTGRES_PASSWORD: {{ .Values.postgress.postgres_password }}
  PGDATA: {{ .Values.postgress.pgdata }}

  GF_SECURITY_ADMIN_USER: {{ .Values.grafana.gf_user }}
  GF_SECURITY_ADMIN_PASSWORD: {{ .Values.grafana.gf_password }}

  spring.datasource.url: {{ .Values.spring.datasource_url }}
  spring.datasource.username: {{ .Values.postgress.postgres_user }}
  spring.datasource.password: {{ .Values.postgress.postgres_password }}
  jakarta.persistence.jdbc.url: {{ .Values.spring.jdbc_url }}

  # This will drop any table in the database and create new ones base on the models
  spring.jpa.hibernate.ddl-auto: create-drop
  # update
  # none
#  global.scrape_interval: "5s"
    # By default, scrape targets every 15 seconds.

    # Attach these labels to any time series or alerts when communicating with
    # external systems (federation, remote storage, Alertmanager).
#  external_labels.monitor: 'codelab-monitor'

  # A scrape configuration containing exactly one endpoint to scrape:
  # Here it's Prometheus itself.
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  prometheus.yml: |
    global:
      scrape_interval: "5s" # By default, scrape targets every 15 seconds.
      # Attach these labels to any time series or alerts when communicating with
      # external systems (federation, remote storage, Alertmanager).
      external_labels:
        monitor: 'codelab-monitor'
    
    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
    scrape_configs:
      - job_name: 'srv2'
        scrape_interval: 5s
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'localhost:8000']
    
      - job_name: 'srv2-ingress'
        honor_timestamps: true
        scrape_interval: 5s
        scrape_timeout: 1m
        metrics_path: '/actuator/prometheus' #'/metrics'
        scheme: http
        static_configs:
          - targets: [srv2-ingress.default.svc.cluster.local:8000]
    

  alertmanager.yml: |
    
    global:
      # The smarthost and SMTP sender used for mail notifications.
      smtp_smarthost: 'localhost:25'
      smtp_from: 'alertmanager@example.org'

    # The root route on which each incoming alert enters.
    route:
      
      receiver: 'team-X-mails'

      group_by: ['alertname', 'cluster']
      group_wait: 30s
      group_interval: 5m

      repeat_interval: 3h

      # All the above attributes are inherited by all child routes and can
      # overwritten on each.

      # The child route trees.
      routes:
      # This route performs a regular expression match on alert labels to
      # catch alerts that are related to a list of services.
      - matchers:
        - service=~"^(srv2)$"
        receiver: team-X-mails


        routes:
        - matchers:
          - severity="critical"
          receiver: team-X-pager

      - matchers:
        - service="files"
        receiver: team-Y-mails

        routes:
        - matchers:
          - severity="critical"
          receiver: team-Y-pager

      # This route handles all alerts coming from a database service. If there's
      # no team to handle it, it defaults to the DB team.
      - matchers:
        - service="database"

        receiver: team-DB-pager
        # Also group alerts by affected database.
        group_by: [alertname, cluster, database]

        routes:
        - matchers:
          - owner="team-X"
          receiver: team-X-pager

        - matchers:
          - owner="team-Y"
          receiver: team-Y-pager

    inhibit_rules:
    - source_matchers:
        - severity="critical"
      target_matchers:
        - severity="warning"
      equal: ['alertname']

    receivers:
    - name: 'team-X-mails'
      email_configs:
      - to: 'team-X+alerts@example.org, team-Y+alerts@example.org'

    - name: 'team-X-pager'
      email_configs:
      - to: 'team-X+alerts-critical@example.org'
      pagerduty_configs:
      - routing_key: <team-X-key>

    - name: 'team-Y-mails'
      email_configs:
      - to: 'team-Y+alerts@example.org'

    - name: 'team-Y-pager'
      pagerduty_configs:
      - routing_key: <team-Y-key>

    - name: 'team-DB-pager'
      pagerduty_configs:
      - routing_key: <team-DB-key>